
                                        1. JAVA BASICS

1.1 Define the scope of variables
--  basics.Variables

1.2 Define the structure of a Java class
--  oop.Classes

1.3 Create executable Java applications with a main method; run a Java program from the command line; produce console output
--

1.4 Import other Java packages to make them accessible in your code
--  basics.Packages

1.5 Compare and contrast the features and components of Java such as: platform independence, object orientation, encapsulation, etc.
--


                                2. WORKING WITH JAVA DATA TYPES

2.1 Declare and initialize variables (including casting of primitive data types)
--  basics.Variables

2.2 Differentiate between object reference variables and primitive variables
--

2.3 Know how to read or write to object fields
--

2.4 Explain an Object's Lifecycle (creation, "dereference by reassignment" and garbage collection)
--

2.5 Develop code that uses wrapper classes such as Boolean, Double, and Integer
--  lang.PrimitiveWrappers


                              3. USING OPERATORS AND DECISION CONSTRUCTS

3.1 Use Java operators; use parentheses to override operator precedence
--  basics.Operators

3.2 Test equality between Strings and other objects using == and equals ()
--  basics.Strings

3.3 Create if and if/else and ternary constructs
--  basics.ControlStatements.ifElseStatements()

3.4 Use a switch statement
-- basics.ControlStatements.switchStatements()


                                  4. CREATING AND USING ARRAYS

4.1 Declare, instantiate, initialize and use a one-dimensional array
--  basics.Arrays

4.2 Declare, instantiate, initialize and use multi-dimensional arrays
--  basics.Arrays


                                     5. USING LOOP CONSTRUCTS

5.1 Create and use while loops
--  basics.ControlStatements.loops()

5.2 Create and use for loops including the enhanced for loop
--  basics.ControlStatements.loops()

5.3 Create and use do/while loops
--  basics.ControlStatements.loops()

5.4 Compare loop constructs
--  basics.ControlStatements.loops()

5.5 Use break and continue
--  basics.ControlStatements.loops(), basics.ControlStatements.switchStatements()


                           6. WORKING WITH METHODS AND ENCAPSULATION


6.1 Create methods with arguments and return values; including overloaded methods
--  oop.Methods

6.2 Apply the static keyword to methods and fields
--  oop.modifiers.StaticModifier

6.3 Create and overload constructors; differentiate between default and user defined constructors
--  oop.Constructors

6.4 Apply access modifiers
--  basics.modifiers.AccessModifiers

6.5 Apply encapsulation principles to a class
--  oop.Encapsulation

6.6 Determine the effect upon object references and primitive values when they are passed  into methods that change the values
--  oop.Methods, basics.Variables


                                   7. WORKING WITH INHERITANCE

7.1 Describe inheritance and its benefits
--  oop.Inheritance

7.2 Develop code that makes use of polymorphism; develop code that overrides methods;  differentiate between the type of a reference and the type of an object
--  oop.Polymorphism, oop.Overriding

7.3 Determine when casting is necessary
--

7.4 Use super and this to access objects and constructors
--

7.5 Use abstract classes and interfaces
--  oop.Abstraction, oop.Interfaces


                                      8. HANDLING EXCEPTIONS

8.1 Differentiate among checked exceptions, unchecked exceptions, and Errors
--  lang.Exceptions

8.2 Create a try-catch block and determine how exceptions alter normal program flow
--  lang.Exceptions

8.3 Describe the advantages of Exception handling
--  lang.Exceptions

8.4 Create and invoke a method that throws an exception
--  lang.Exceptions

8.5 Recognize common exception classes (such as NullPointerException, ArithmeticException, ArrayIndexOutOfBoundsException, ClassCastException)
--  lang.Exceptions


                           9. WORKING WITH SELECTED CLASSES FROM THE JAVA API

9.1 Manipulate data using the StringBuilder class and its methods
--  basics.Strings

9.2 Create and manipulate Strings
--  basics.Strings

9.3 Create and manipulate calendar data using classes from java.time.LocalDateTime,  java.time.LocalDate, java.time.LocalTime, java.time.format.DateTimeFormatter, java.time.Period
--

9.4 Declare and use an ArrayList of a given type
--  basics.ArrayLists

9.5 Write a simple Lambda expression that consumes a Lambda Predicate expression
--