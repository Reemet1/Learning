
INHERITANCE

The Superclass reference variable can hold the subclass object, but using that variable you can access only the members of the superclass,
so to access the members of both classes it is recommended to always create reference variable to the subclass.

If a class is inheriting the properties of another class, the subclass automatically acquires the default constructor of the superclass.
But if you want to call a parameterized constructor of the superclass, you need to use the super keyword.

With the use of the extends keyword, the subclasses will be able to inherit all the properties of the superclass except for the private properties of the superclass.

In Object-Oriented feature, the users do not need to bother about which object is doing the real work.

Java does not support multiple inheritance. However, a class can implement one or more interfaces.


POLYMORPHISM

Polymorphism is the ability of an object to take on many forms.
The most common use of polymorphism in OOP occurs when a parent class reference
is used to refer to a child class object.

The type of the reference variable would determine the methods that it can invoke on the object.

A reference variable can refer to any object of its declared type or any subtype of its declared type.

Virtual method - superclass method which the JVM checks before compiling, though subclass method of the same name is called.


OVERRIDING

Overriding means to override the functionality of an existing method.

When invoking a superclass version of an overridden method the super keyword is used.

In compile time, the check is made on the reference type. However, in the runtime, JVM figures out the object type and would run the method that belongs to that particular object.

OVERRIDING RULES:

The argument list should be exactly the same as that of the overridden method.

The return type should be the same or a subtype of the return type declared in the original overridden method in the superclass.

The access level cannot be more restrictive than the overridden method's access level. For example: If the superclass method is declared public then the
overridding method in the sub class cannot be either private or protected.

Instance methods can be overridden only if they are inherited by the subclass.

A method declared final cannot be overridden.

A method declared static cannot be overridden but can be re-declared.

If a method cannot be inherited, then it cannot be overridden.

A subclass within the same package as the instance's superclass can override any superclass method that is not declared private or final.

A subclass in a different package can only override the non-final methods declared public or protected.

An overriding method can throw any uncheck exceptions, regardless of whether the overridden method throws exceptions or not. However,
the overriding method should not throw checked exceptions that are new or broader than the ones declared by the overridden method.
The overriding method can throw narrower or fewer exceptions than the overridden method.

Constructors cannot be overridden.


ENCAPSULATION

Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit.
In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class.

BENEFITS OF ENCAPSULATION

The fields of a class can be made read-only or write-only.

A class can have total control over what is stored in its fields.

The users of a class do not know how the class stores its data. A class can change the data type of a field and users of the class do not need to change any of their code.


ABSTRACTION

In Object-oriented programming, abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user.
In other words, the user will have the information on what the object does instead of how it does it.

ABSTRACT CLASS

Abstract classes may or may not contain abstract methods, i.e., methods without body ( public void get(); )

But, if a class has at least one abstract method, then the class must be declared abstract.

If a class is declared abstract, it cannot be instantiated, though it can be used as a reference type.

To use an abstract class, you have to inherit it from another class, provide implementations to the abstract methods in it.

If you inherit an abstract class, you have to provide implementations to all the abstract methods in it.

A constructor of an abstract class can be called only from the subclass.

If you want a class to contain a particular method but you want the actual implementation of that method to be determined by child classes,
you can declare the method in the parent class as an abstract. Example: modifier returnType abstract method(parameters p);

Any class inheriting the current class must either override the abstract method or declare itself as abstract.
Eventually, one descendant class has to implement the abstract methods.


INTERFACES

An interface is a reference type in Java. It is similar to class. It is a collection of abstract methods.
Along with abstract methods, an interface may also contain constants, default methods, static methods, and nested types.
Method bodies exist only for default methods and static methods.

INTERFACE RULES

You cannot instantiate an interface.

An interface does not contain any constructors.

All of the methods in an interface are abstract.

An interface cannot contain instance fields. The only fields that can appear in an interface must be declared both static and final.

An interface is not extended by a class; it is implemented by a class.

An interface can extend multiple interfaces.

A class can implement more than one interface at a time.

A class can extend only one class, but implement many interfaces.

An interface can extend another interface, in a similar way as a class can extend another class.


INTERFACE PROPERTIES

An interface is implicitly abstract. You do not need to use the abstract keyword while declaring an interface.

Each method in an interface is also implicitly abstract, so the abstract keyword is not needed.

Methods in an interface are implicitly public.


When a class implements an interface, you can think of the class as signing a contract, agreeing to perform the specific behaviors of the interface.
If a class does not perform all the behaviors of the interface, the class must declare itself as abstract.

OVERRIDING RULES

Checked exceptions should not be declared on implementation methods other than the ones declared by the interface method or subclasses of those declared by the interface method.

The signature of the interface method and the same return type or subtype should be maintained when overriding the methods.


An interface with no methods in it is referred to as a tagging interface. There are two basic design purposes of tagging interfaces:

1) Adds a common parent
2) Adds a data type to a class

An implementation class itself can be abstract and if so, interface methods need not be implemented.


