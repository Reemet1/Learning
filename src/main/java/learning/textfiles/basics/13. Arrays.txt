Java provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type.

dataType[] arrayReference; dataType arrayReference[];

Declaring an array variable, creating an array, and assigning the reference of the array to the variable can be combined in one statement, 
as shown below 
dataType[] arrayReference = new dataType[arrayLength];

Alternatively you can create arrays as follows
datatType[] arrayReference = {value0, value1, value2, ..., valuek};

The array elements are accessed through the index. Array indices are 0-based; that is, they start from 0 to arrayRefVar.length-1.

When processing array elements, we often use either for loop or foreach loop because all of the elements in an array are of the same type 
and the size of the array is known.

for (int i = 0; i < myArray.length; i++) {
         System.out.print(myArray[i] + " ");
}

JDK 1.5 introduced a new for loop known as foreach loop or enhanced for loop, which enables you to traverse the complete array sequentially 
without using an index variable.

for (double element : myArray) {
	System.out.print(element + " ");
}

Passing arrays to methods as arguments: printArray(new int[]{3, 1, 2, 6, 4, 2});

java.util.Arrays static methods:

public static int binarySearch(Object[] a, Object key)
Searches the specified array of Object ( Byte, Int , double, etc.) for the specified value using the binary search algorithm. 
The array must be sorted prior to making this call. This returns index of the search key, if it is contained in the list; otherwise, 
it returns ( – (insertion point + 1)).

public static boolean equals(long[] a, long[] a2)
Returns true if the two specified arrays of longs are equal to one another. 
Two arrays are considered equal if both arrays contain the same number of elements, and all corresponding pairs of elements in the two 
arrays are equal.
This returns true if the two arrays are equal. Same method could be used by all other primitive data types (byte, short, int, etc.)

public static void fill(int[] a, int val)
Assigns the specified int value to each element of the specified array of ints. The same method could be used by all other 
primitive data types (byte, short, int, etc.)

public static void sort(Object[] a)
Sorts the specified array of objects into an ascending order, according to the natural ordering of its elements. 
The same method could be used by all other primitive data types (byte, short, int, etc.)

