JAVA ACCESS MODIFIERS

Default Access Modifier, No Keyword - A variable or method declared without any access control modifier is available to any other 
class in the same package. 
The fields in an interface are implicitly public static final and the methods in an interface are by default public.

Private Access Modifier - Methods, variables, and constructors that are declared private can only be accessed within the declared class itself.
Private access modifier is the most restrictive access level. Class and interfaces cannot be private.
Variables that are declared private can be accessed outside the class, if public getter methods are present in the class.
Using the private modifier is the main way that an object encapsulates itself and hides data from the outside world.
Subclasses do not inherit private methods and variables from the superclass.

Public Access Modifier - A class, method, constructor, interface, etc. declared public can be accessed from any other class.
However, if the public class we are trying to access is in a different package, then the public class still needs to be imported. 
Because of class inheritance, all public methods and variables of a class are inherited by its subclasses.
The main() method of an application has to be public. Otherwise, it could not be called by a Java interpreter (such as java) to run the class.

Protected Access Modifier - Variables, methods, and constructors, which are declared protected in a superclass can be accessed only by the 
subclasses in other package or any class within the package of the protected members' class.
The protected access modifier cannot be applied to class and interfaces. 
Methods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.
Protected access gives the subclass a chance to use the helper method or variable, while preventing a nonrelated class from trying to use it.

Access Control and Inheritance
The following rules for inherited methods are enforced
Methods declared public in a superclass also must be public in all subclasses.
Methods declared protected in a superclass must either be protected or public in subclasses; they cannot be private.
Methods declared private are not inherited at all, so there is no rule for them.


JAVA NON-ACCESS MODIFIERS

STATIC Modifier: 
Static Variable - The static keyword is used to create variables that will exist independently of any instances created for the class. 
Only one copy of the static variable exists regardless of the number of instances of the class.
Static variables are also known as class variables. Local variables cannot be declared static.

Static Method - The static keyword is used to create methods that will exist independently of any instances created for the class.
Static methods do not use any instance variables of any object of the class they are defined in. 
Static methods take all the data from parameters and compute something from those parameters, with no reference to variables.
Class variables and methods can be accessed using the class name followed by a dot and the name of the variable or method.


FINAL Modifier:
Final Variable - A final variable can be explicitly initialized only once. A reference variable declared final can never be reassigned to 
refer to an different object.
However, the data within the object can be changed. So, the state of the object can be changed but not the reference.
With variables, the final modifier often is used with static to make the constant a class variable.

Final Method - A final method cannot be overridden by any subclasses. As mentioned previously, the final modifier prevents a method from 
being modified in a subclass.
The main intention of making a method final would be that the content of the method should not be changed by any outsider.

Final Class - The main purpose of using a class being declared as final is to prevent the class from being subclassed. 
If a class is marked as final then no class can inherit any feature from the final class.


ABSTRACT Modifier:

Abstract Class - An abstract class can never be instantiated. If a class is declared as abstract then the sole purpose is for the class 
to be extended.
A class cannot be both abstract and final (since a final class cannot be extended). If a class contains abstract methods then the class 
should be declared abstract. 
Otherwise, a compile error will be thrown. An abstract class may contain both abstract methods as well normal methods.

Abstract Method - An abstract method is a method declared without any implementation. The methods body (implementation) is provided by the 
subclass. 
Abstract methods can never be final or strict.
Any class that extends an abstract class must implement all the abstract methods of the super class, unless the subclass is also an abstract 
class.
If a class contains one or more abstract methods, then the class must be declared abstract. An abstract class does not need to contain 
abstract methods.
The abstract method ends with a semicolon. Example: public abstract sample();


SYNCHRONIZED Modifier:
The synchronized keyword used to indicate that a method can be accessed by only one thread at a time. The synchronized modifier 
can be applied with any of the four access level modifiers.

TRANSIENT Modifier:
An instance variable is marked transient to indicate the JVM to skip the particular variable when serializing the object containing it.

VOLATILE Modifier:
The volatile modifier is used to let the JVM know that a thread accessing the variable must always merge its own private copy of the 
variable with the master copy in the memory.
Accessing a volatile variable synchronizes all the cached copies of the variables in the main memory. 
Volatile can only be applied to instance variables, which are of type object or private. A volatile object reference can be null.






