The java.io package contains nearly every class you might ever need to perform input and output (I/O) in Java. 
All these streams represent an input source and an output destination.

STREAM

A stream can be defined as a sequence of data. There are two kinds of Streams:

The InputStream is used to read data from a source.
The OutputStream is used for writing data to a destination.

Byte Streams

Java byte streams are used to perform input and output of 8-bit bytes. 
Though there are many classes related to byte streams but the most frequently used classes are,
FileInputStream and FileOutPutStream.

Character Streams

Java Byte streams are used to perform input and output of 8-bit bytes, whereas Java Character streams 
are used to perform input and output for 16-bit unicode. 
Though there are many classes related to character streams but the most frequently used classes are, FileReader and FileWriter.
Though internally FileReader uses FileInputStream and FileWriter uses FileOutputStream but here the major difference is that 
FileReader reads two bytes at a time and FileWriter writes two bytes at a time.

FileInputStream and FileOutputStream can read and write any binary data, while
FileReader and FileWriter are only used for character streams from and to .txt files.

Standard Streams

Java provides the following three standard streams:

Standard Input - This is used to feed the data to user's program and usually a keyboard is used as standard input stream and 
represented as System.in. InputStreamReader
Standard Output - This is used to output the data produced by the user's program and usually a computer screen is used for 
standard output stream and represented as System.out.
Standard Error - This is used to output the error data produced by the user's program and usually a computer screen is 
used for standard error stream and represented as System.err.

Reading and Writing files

FileInputStream - This stream is used for reading data from the files.
InputStream f = new FileInputStream("C:/java/hello");
Methods: close(), finalize(), read(int r), read(byte[] b), int available().

ByteArrayInputStream - The ByteArrayInputStream class allows a buffer in the memory to be used as an InputStream. 
The input source is a byte array.
DataInputStream - The DataInputStream is used in the context of DataOutputStream and can be used to read primitives.
DataOutputStream dataOut = new DataOutputStream(new FileOutputStream("E:\\file.txt"));
DataInputStream dataIn = new DataInputStream(new FileInputStream("E:\\file.txt"));
dataOut.writeUTF(), dataIn.readUTF(), readLine(), readInt, writeInt, ...

FileOutputStream - is used to create a file and write data into it. The stream would create a file, if it doesn't already exist, 
before opening it for output.
OutputStream f = new FileOutputStream("C:/java/hello");
Methods: close(), finalize(), write(int r), write(byte[] b)

The ByteArrayOutputStream class stream creates a buffer in memory and all the data sent to the stream is stored in the buffer.
The DataOutputStream stream lets you write the primitives to an output source.


File Navigation and I/O

Java File class represents the files and directory pathnames in an abstract manner. This class is used for creation of files and directories, 
file searching, file deletion, etc.
The File object represents the actual file/directory on the disk.

FileReader - This class inherits from the InputStreamReader class. FileReader is used for reading streams of characters.
FileWriter - This class inherits from the OutputStreamWriter class. The class is used for writing streams of characters.

Directories in Java

A directory is a File which can contain a list of other files and directories. You use File object to create directories, 
to list down files available in a directory. 
There are two useful File utility methods, which can be used to create directories:
The mkdir( ) method creates a directory, returning true on success and false on failure. 
Failure indicates that the path specified in the File object already exists, or that the directory cannot be created because 
the entire path does not exist yet.
The mkdirs() method creates both a directory and all the parents of the directory.
You can use list( ) method provided by File object to list down all the files and directories available.








