Decision making structures have one or more conditions to be evaluated or tested by the program, along with a statement or statements 
that are to be executed 
if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.

if(conditional1) {
	//actions1
}
else if(conditional2) {
	//actions2	
}
else {
	//actions2
}

An if statement consists of a Boolean expression followed by one or more statements.
An if statement can be followed by an optional else statement, which executes when the boolean expression is false.
You can use one if or else if statement inside another if or else if statement(s).
A switch statement allows a variable to be tested for equality against a list of values. Each value is called a case, 
and the variable being switched on is checked for each case.

The following rules apply to a switch statement:
The variable used in a switch statement can only be integers, convertable integers (byte, short, char), strings and enums.
You can have any number of case statements within a switch. Each case is followed by the value to be compared to and a colon.
The value for a case must be the same data type as the variable in the switch and it must be a constant or a literal.
When the variable being switched on is equal to a case, the statements following that case will execute until a break statement is reached.
When a break statement is reached, the switch terminates, and the flow of control jumps to the next line following the switch statement.
Not every case needs to contain a break. If no break appears, the flow of control will fall through to subsequent cases until a break is reached.
A switch statement can have an optional default case, which must appear at the end of the switch. The default case can be used for performing a 
task when none of the cases is true. No break is needed in the default case.

switch(argument) {
	case (value1) :
		//actions1
	...
	case (valueN) : 
		//actionsN
	default :
		//defaultActions
}

The ?: operator
Exp1 ? Exp2 : Exp3;

First Exp1 is evaluated, if it is true, then Exp2, if false, then Exp3.