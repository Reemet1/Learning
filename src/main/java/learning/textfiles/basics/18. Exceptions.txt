An exception (or exceptional event) is a problem that arises during the execution of a program. 
When an Exception occurs the normal flow of the program is disrupted and the program/Application terminates abnormally, which is not recommended, 
therefore, these exceptions are to be handled. 
Some of these exceptions are caused by user error, others by programmer error, and others by physical resources that have failed in some manner.

Based on these, we have three categories of Exceptions:

A checked exception is an exception that occurs at the compile time, these are also called as compile time exceptions. 
These exceptions cannot simply be ignored at the time of compilation, the programmer should take care of (handle) these exceptions.

An unchecked exception is an exception that occurs at the time of execution. These are also called as Runtime Exceptions. 
These include programming bugs, such as logic errors or improper use of an API. Runtime exceptions are ignored at the time of compilation.

Errors - These are not exceptions at all, but problems that arise beyond the control of the user or the programmer. 
Errors are typically ignored in your code because 
you can rarely do anything about an error. For example, if a stack overflow occurs, an error will arise. 
They are also ignored at the time of compilation.

Exception Hierarchy

All exception classes are subtypes of the java.lang.Exception class. The exception class is a subclass of the Throwable class. 
Other than the exception class there is another subclass called Error which is derived from the Throwable class.

Errors are abnormal conditions that happen in case of severe failures, these are not handled by the Java programs. 
Errors are generated to indicate errors generated by the runtime environment. 
Example: JVM is out of memory. Normally, programs cannot recover from errors.

The Exception class has two main subclasses: IOException class and RuntimeException Class.

Exception methods: getMessage(), getCause(), toString(), printStackTrace().

Catching Exceptions

A method catches an exception using a combination of the try and catch keywords. A try/catch block is placed around the code
 that might generate an exception. 
Code within a try/catch block is referred to as protected code.The code which is prone to exceptions is placed in the try block. 
When an exception occurs, 
that exception occurred is handled by catch block associated with it. Every try block should be immediately followed either by a 
catch block or finally block.
A catch statement involves declaring the type of exception you are trying to catch. If an exception occurs in protected code, 
the catch block (or blocks) that 
follows the try is checked. If the type of exception that occurred is listed in a catch block, the exception is passed to the catch block.

A try block can be followed by multiple catch blocks. If an exception occurs in the protected code, the exception is thrown to the first 
catch block in the list. 
If the data type of the exception thrown matches ExceptionType1, it gets caught there. If not, the exception passes down to the second 
catch statement. 
This continues until the exception either is caught or falls through all catches, in which case the current method stops execution and 
the exception is thrown 
down to the previous method on the call stack.

Since Java 7, you can handle more than one exception using a single catch block.
catch (IOException|FileNotFoundException ex) {
   \\Code
}

The throw and throws keywords
If a method does not handle a checked exception, the method must declare it using the throws keyword.
You can throw an exception, either a newly instantiated one or an exception that you just caught, by using the throw keyword.
throws is used to postpone the handling of a checked exception and throw is used to invoke an exception explicitly.
A method can declare that it throws more than one exception, in which case the exceptions are declared in a list separated by commas.

The finally block
The finally block follows a try block or a catch block. A finally block of code always executes, irrespective of occurrence of an Exception.
Using a finally block allows you to run any cleanup-type statements that you want to execute, no matter what happens in the protected code.

Notes:
A catch clause cannot exist without a try statement.
It is not compulsory to have finally clauses whenever a try/catch block is present.
The try block cannot be present without either catch clause or finally clause.
Any code cannot be present in between the try, catch, finally blocks.

The try-with-resources

Generally, when we use any resources like streams, connections, etc. we have to close them explicitly using finally block.
try-with-resources, also referred as automatic resource management, is a new exception handling mechanism that was introduced in Java 7, 
which automatically closes the resources used within the try catch block.
To use this statement, you simply need to declare the required resources within the parenthesis, and the created resource will be closed 
automatically at the end of the block.
try(FileReader fr = new FileReader("E://file.txt")) {
         \\Code
      }catch(IOException e) {
         e.printStackTrace();
}

Notes on try-with-resources:
To use a class with try-with-resources statement it should implement AutoCloseable interface and the close() method of it gets invoked 
automatically at runtime.
You can declare more than one class in try-with-resources statement.
While you declare multiple classes in the try block of try-with-resources statement these classes are closed in reverse order.
Except the declaration of resources within the parenthesis everything is the same as normal try/catch block of a try block.
The resource declared in try gets instantiated just before the start of the try-block.
The resource declared at the try block is implicitly declared as final.

User-defined Exceptions

You can create your own exceptions in Java.
All exceptions must be a child of Throwable.
If you want to write a checked exception that is automatically enforced by the Handle or Declare Rule, you need to extend the Exception class.
If you want to write a runtime exception, you need to extend the RuntimeException class.

Common Exceptions

JVM Exceptions - These are exceptions/errors that are exclusively or logically thrown by the JVM. Examples: NullPointerException, 
ArrayIndexOutOfBoundsException, ClassCastException.
Programmatic Exceptions - These exceptions are thrown explicitly by the application or the API programmers. 
Examples: IllegalArgumentException, IllegalStateException.
