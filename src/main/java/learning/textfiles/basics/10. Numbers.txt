Normally, when we work with Numbers, we use primitive data types such as byte, int, long, double, etc.
However, in development, we come across situations where we need to use objects instead of primitive data types. In order to achieve this, 
Java provides wrapper classes.
All the wrapper classes (Integer, Long, Byte, Double, Float, Short) are subclasses of the abstract class Number.

The object of the wrapper class contains or wraps its respective primitive data type. 
Converting primitive data types into object is called boxing, and this is taken care by the compiler. 
Therefore, while using a wrapper class you just need to pass the value of the primitive data type to the constructor of the Wrapper class.
And the Wrapper object will be converted back to a primitive data type, and this process is called unboxing.

During calculations the Integer object will be unboxed to int.

Some methods:

xxxValue() - Converts the value of this Number object to the xxx data type and returns it.
compareTo(), equals()
valueOf() - Returns an Integer object holding the value of the specified primitive.
toString(), parseInt(), Math.toDegrees(), Math.toRadians(), random(), different mathematical operations.

