Stream is a new abstract layer introduced in Java 8. Using stream, you can process data in a declarative way similar to SQL statements.
Using collections framework in Java, a developer has to use loops and make repeated checks. Another concern is efficiency; 
as multi-core processors are available at ease, a Java developer has to write parallel code processing that can be pretty error-prone.

To resolve such issues, Java 8 introduced the concept of stream that lets the developer to process data declaratively and leverage 
multicore architecture without the need to write any specific code for it.

What is Stream?
Stream represents a sequence of objects from a source, which supports aggregate operations. Following are the characteristics of a Stream:

Sequence of elements - A stream provides a set of elements of specific type in a sequential manner. 
A stream gets/computes elements on demand. It never stores the elements.
Source - Stream takes Collections, Arrays, or I/O resources as input source.
Aggregate operations - Stream supports aggregate operations like filter, map, limit, reduce, find, match, and so on.

Pipelining - Most of the stream operations return stream itself so that their result can be pipelined. 
These operations are called intermediate operations and their function is to take input, process them, and return output to the target. 
collect() method is a terminal operation which is normally present at the end of the pipelining operation to mark the end of the stream.

Automatic iterations - Stream operations do the iterations internally over the source elements provided, 
in contrast to Collections where explicit iteration is required.

Generating streams
With Java 8, Collection interface has two methods to generate a Stream:
stream() - Returns a sequential stream considering collection as its source.
parallelStream() - Returns a parallel Stream considering collection as its source.

stream() 
filter() - The 'filter' method is used to eliminate elements based on a criteria.
collect()
The ‘filter’ method is used to eliminate elements based on a criteria.

stream gets all the elements "a" from the list that fulfill the predicate a > 3, then collects them into a new list. 
Then the result list is iterated with forEach() method.
list.stream().filter(a -> a > 3).collect(Collectors.toList()).forEarch(System.out::println);

map() - change the values. The 'map' method is used to map each element to its corresponding result. 
list.stream().map(a -> a*a).collect(Collectors.toList());

list.stream().map(a -> a*a).distinct

limit() - The 'limit' method is used to reduce the size of the stream.
Random random = new Random(); random.ints().limit(10).forEach(System.out::println);

sorted() - The 'sorted' method is used to sort the stream.
random.ints().limit(10).sorted().forEach(System.out::println);

Without limit(10) the random numbers are printed infinitely.


Parallel Processing

parallelStream is the alternative of stream for parallel processing.
list.parallelStream().forEach(System.out::println);

Collectors
Collectors are used to combine the result of processing on the elements of a stream. Collectors can be used to return a list or a string.

List<String> list = new ArrayList(Arrays.asList("1","2","3","4","5"));
System.out.println(list.stream().filter(a -> true).collect(Collectors.joining(", ")));
result: 1, 2, 3, 4, 5

Statistics
With Java 8, statistics collectors are introduced to calculate all statistics when stream processing is being done.

List<Integer> numbers = new ArrayList(Arrays.asList(1,2,3,4,5));
IntSummaryStatistics stats = numbers.stream().mapToInt((x) -> x).summaryStatistics();
stats.getMin();  stats.getMax(), stats.getAverage(), stats.getCount(); stats.getSum();









