Lambda expressions are introduced in Java 8 and are touted to be the biggest feature of Java 8. 
Lambda expression facilitates functional programming, and simplifies the development a lot.

A lambda expression is characterized by the following syntax:   parameter -> expression body

Following are the important characteristics of a lambda expression:

Optional type declaration - No need to declare the type of a parameter. The compiler can inference the same from the value of the parameter.
Optional parenthesis around parameter - No need to declare a single parameter in parenthesis. For multiple parameters, parentheses are required.
Optionaly curly braces - No need to use curly braces in expression body if the body contains a single statement.
Optional return keyword - The compiler automatically returns the value if the body has a single expression to return the value. 
Curly braces are required to indicate that expression returns a value.

Lambda expressions are used primarily to define inline implementation of a functional interface, i.e., an interface with a single method only.
Lambda expression eliminates the need of anonymous class and gives a very simple yet powerful functional programming capability to Java.

Using lambda expression, you can refer to final variable or effectively final variable (which is assigned only once).

Example:

public class Klass {
	
	public static void method(TestInterface testInterface, int a) {
		testInterface.testMethod(a);
	}
	
	public static void main(String[] args) {

		List<Integer> list = new ArrayList(Arrays.asList(6,8,3,5,2));
		Collections.sort(list, (a, b) -> a.compareTo(b));
		
		TestInterface instance1 = a -> System.out.println(a);
		instance1.testMethod(1);
		
		TestInterface instance2 = new TestInterface() {
			public void testMethod(int a) {
				System.out.println(a);
			}
		};
		instance2.testMethod(2);
		
		method(instance1, 3);
			
	}
}

interface TestInterface {	
	void testMethod(int a);	
}